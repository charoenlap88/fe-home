import React, { useState, useRef, useCallback } from "react";
import Webcam from "react-webcam";
import { Container, Title, Button, Group, Card, Text } from '@mantine/core';
import { IconCamera, IconX } from '@tabler/icons-react';

const Camera = () => {
  const [isStreaming, setIsStreaming] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  
  const webcamRef = useRef(null);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const startCamera = useCallback(() => {
    setIsLoading(true);
    console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...');
    
    // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Webcam component ‡∏û‡∏£‡πâ‡∏≠‡∏°
    setTimeout(() => {
      setIsStreaming(true);
      setIsLoading(false);
      console.log('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    }, 1000);
  }, []);

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const stopCamera = useCallback(() => {
    setIsStreaming(false);
    console.log('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  }, []);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ media stream
  const handleUserMedia = useCallback(() => {
    console.log('‡πÑ‡∏î‡πâ media stream ‡πÅ‡∏•‡πâ‡∏ß');
    setIsStreaming(true);
    setIsLoading(false);
  }, []);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ error
  const handleUserMediaError = useCallback((error) => {
    console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:', error);
    alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á');
    setIsLoading(false);
  }, []);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  React.useEffect(() => {
    const timer = setTimeout(() => {
      startCamera();
    }, 1000);
    
    return () => {
      clearTimeout(timer);
    };
  }, [startCamera]);

  return (
    <Container size="xl">
      <Title order={1} mb="xl" ta="center">
        üì∏ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
      </Title>

      <Group justify="center" mb="xl">
        {!isStreaming ? (
          <Button 
            leftSection={<IconCamera size="1.2rem" />}
            onClick={startCamera}
            size="lg"
            color="blue"
            loading={isLoading}
            disabled={isLoading}
          >
            {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...' : '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á'}
          </Button>
        ) : (
          <Button 
            onClick={stopCamera}
            size="lg"
            color="red"
            leftSection={<IconX size="1.2rem" />}
          >
            ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
          </Button>
        )}
      </Group>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö Real-time ‡∏î‡πâ‡∏ß‡∏¢ react-webcam */}
      {isStreaming && (
        <Card shadow="lg" padding="lg" radius="md" withBorder style={{ maxWidth: '800px', margin: '0 auto' }}>
          <Card.Section>
            <div style={{ 
              position: 'relative',
              backgroundColor: '#000',
              borderRadius: '8px',
              overflow: 'hidden'
            }}>
              <Webcam
                ref={webcamRef}
                audio={false}
                videoConstraints={{
                  width: 800,
                  height: 600,
                  facingMode: "environment"
                }}
                onUserMedia={handleUserMedia}
                onUserMediaError={handleUserMediaError}
                style={{
                  width: '100%',
                  height: 'auto',
                  display: 'block',
                  minHeight: '500px',
                  objectFit: 'cover'
                }}
              />
              
              {/* Overlay ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
              <div style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                color: '#00ff00',
                padding: '4px 8px',
                borderRadius: '4px',
                fontSize: '12px',
                fontWeight: 'bold'
              }}>
                ‚óè LIVE
              </div>
            </div>
          </Card.Section>
        </Card>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î */}
      {isLoading && (
        <Card shadow="lg" padding="lg" radius="md" withBorder style={{ maxWidth: '400px', margin: '0 auto' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '48px', marginBottom: '1rem' }}>üìπ</div>
            <Text size="lg" fw={500} mb="sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...</Text>
            <Text size="sm" c="dimmed">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</Text>
          </div>
        </Card>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ stream */}
      {!isLoading && !isStreaming && (
        <Card shadow="lg" padding="lg" radius="md" withBorder style={{ maxWidth: '400px', margin: '0 auto' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '48px', marginBottom: '1rem' }}>üîÑ</div>
            <Text size="lg" fw={500} mb="sm">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...</Text>
            <Text size="sm" c="dimmed">‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</Text>
          </div>
        </Card>
      )}
    </Container>
  );
};

export default Camera;