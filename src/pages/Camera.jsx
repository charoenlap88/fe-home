import React, { useState, useRef, useCallback } from "react";
import Webcam from "react-webcam";
import { Container, Title, Button, Group, Card, Text, TextInput, Stack, Switch } from '@mantine/core';
import { IconCamera, IconX, IconSettings, IconDeviceMobile } from '@tabler/icons-react';

const Camera = () => {
  const [isStreaming, setIsStreaming] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [useRaspberryPi, setUseRaspberryPi] = useState(false);
  const [raspberryPiIP, setRaspberryPiIP] = useState('192.168.1.100');
  const [raspberryPiPort, setRaspberryPiPort] = useState('8080');
  const [showSettings, setShowSettings] = useState(false);
  
  const webcamRef = useRef(null);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const startCamera = useCallback(() => {
    setIsLoading(true);
    console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...');
    
    if (useRaspberryPi) {
      console.log(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Raspberry Pi: ${raspberryPiIP}:${raspberryPiPort}`);
    }
    
    // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Webcam component ‡∏û‡∏£‡πâ‡∏≠‡∏°
    setTimeout(() => {
      setIsStreaming(true);
      setIsLoading(false);
      console.log('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    }, 1000);
  }, [useRaspberryPi, raspberryPiIP, raspberryPiPort]);

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const stopCamera = useCallback(() => {
    setIsStreaming(false);
    console.log('‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß');
  }, []);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ media stream
  const handleUserMedia = useCallback(() => {
    console.log('‡πÑ‡∏î‡πâ media stream ‡πÅ‡∏•‡πâ‡∏ß');
    setIsStreaming(true);
    setIsLoading(false);
  }, []);

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ error
  const handleUserMediaError = useCallback((error) => {
    console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:', error);
    if (useRaspberryPi) {
      alert(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Raspberry Pi ‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:\n1. IP Address: ${raspberryPiIP}\n2. Port: ${raspberryPiPort}\n3. ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà`);
    } else {
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á');
    }
    setIsLoading(false);
  }, [useRaspberryPi, raspberryPiIP, raspberryPiPort]);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  React.useEffect(() => {
    const timer = setTimeout(() => {
      startCamera();
    }, 1000);
    
    return () => {
      clearTimeout(timer);
    };
  }, [startCamera]);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Raspberry Pi camera
  const getCameraSource = () => {
    if (useRaspberryPi) {
      // ‡πÉ‡∏ä‡πâ MJPEG stream ‡∏à‡∏≤‡∏Å Raspberry Pi
      return `http://${raspberryPiIP}:${raspberryPiPort}/stream`;
    }
    return undefined; // ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
  };

  return (
    <Container size="xl">
      <Title order={1} mb="xl" ta="center">
        üì∏ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û
      </Title>

      {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ */}
      <Group justify="center" mb="md">
        <Button
          variant="outline"
          leftSection={<IconSettings size="1.2rem" />}
          onClick={() => setShowSettings(!showSettings)}
          size="sm"
        >
          {showSettings ? '‡∏ã‡πà‡∏≠‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤' : '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'}
        </Button>
      </Group>

      {/* ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á Raspberry Pi */}
      {showSettings && (
        <Card shadow="sm" padding="lg" radius="md" withBorder mb="xl" style={{ maxWidth: '600px', margin: '0 auto 2rem auto' }}>
          <Group mb="md">
            <IconDeviceMobile size="1.5rem" color="#c41e3a" />
            <Title order={4}>‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á Raspberry Pi</Title>
          </Group>
          
          <Stack gap="md">
            <Switch
              label="‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Raspberry Pi"
              checked={useRaspberryPi}
              onChange={(event) => setUseRaspberryPi(event.currentTarget.checked)}
              description="‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Raspberry Pi ‡πÅ‡∏ó‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå"
            />
            
            {useRaspberryPi && (
              <>
                <TextInput
                  label="IP Address ‡∏Ç‡∏≠‡∏á Raspberry Pi"
                  placeholder="192.168.1.100"
                  value={raspberryPiIP}
                  onChange={(event) => setRaspberryPiIP(event.currentTarget.value)}
                  description="IP Address ‡∏Ç‡∏≠‡∏á Raspberry Pi ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô"
                />
                
                <TextInput
                  label="Port"
                  placeholder="8080"
                  value={raspberryPiPort}
                  onChange={(event) => setRaspberryPiPort(event.currentTarget.value)}
                  description="Port ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö stream ‡∏Å‡∏•‡πâ‡∏≠‡∏á (‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏≠ 8080 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mjpg-streamer)"
                />
                
                <Text size="sm" c="blue" ta="center">
                  üí° ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á mjpg-streamer ‡∏´‡∏£‡∏∑‡∏≠ similar software ‡∏ö‡∏ô Raspberry Pi
                </Text>
              </>
            )}
          </Stack>
        </Card>
      )}

      <Group justify="center" mb="xl">
        {!isStreaming ? (
          <Button 
            leftSection={<IconCamera size="1.2rem" />}
            onClick={startCamera}
            size="lg"
            color="blue"
            loading={isLoading}
            disabled={isLoading}
          >
            {isLoading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...' : '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á'}
          </Button>
        ) : (
          <Button 
            onClick={stopCamera}
            size="lg"
            color="red"
            leftSection={<IconX size="1.2rem" />}
          >
            ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
          </Button>
        )}
      </Group>

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö Real-time */}
      {isStreaming && (
        <Card shadow="lg" padding="lg" radius="md" withBorder style={{ maxWidth: '800px', margin: '0 auto' }}>
          <Card.Section>
            <div style={{ 
              position: 'relative',
              backgroundColor: '#000',
              borderRadius: '8px',
              overflow: 'hidden'
            }}>
              {useRaspberryPi ? (
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Raspberry Pi
                <img
                  src={getCameraSource()}
                  alt="‡∏Å‡∏•‡πâ‡∏≠‡∏á Raspberry Pi"
                  style={{
                    width: '100%',
                    height: 'auto',
                    display: 'block',
                    minHeight: '500px',
                    objectFit: 'cover'
                  }}
                  onLoad={() => {
                    console.log('‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Raspberry Pi ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                    setIsLoading(false);
                  }}
                  onError={() => {
                    console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Raspberry Pi ‡πÑ‡∏î‡πâ');
                    handleUserMediaError(new Error('Connection failed'));
                  }}
                />
              ) : (
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
                <Webcam
                  ref={webcamRef}
                  audio={false}
                  videoConstraints={{
                    width: 800,
                    height: 600,
                    facingMode: "environment"
                  }}
                  onUserMedia={handleUserMedia}
                  onUserMediaError={handleUserMediaError}
                  style={{
                    width: '100%',
                    height: 'auto',
                    display: 'block',
                    minHeight: '500px',
                    objectFit: 'cover'
                  }}
                />
              )}
              
              {/* Overlay ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */}
              <div style={{
                position: 'absolute',
                top: '10px',
                right: '10px',
                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                color: '#00ff00',
                padding: '4px 8px',
                borderRadius: '4px',
                fontSize: '12px',
                fontWeight: 'bold'
              }}>
                ‚óè LIVE
              </div>

              {/* ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á */}
              <div style={{
                position: 'absolute',
                top: '10px',
                left: '10px',
                backgroundColor: 'rgba(0, 0, 0, 0.7)',
                color: 'white',
                padding: '4px 8px',
                borderRadius: '4px',
                fontSize: '11px'
              }}>
                {useRaspberryPi ? 'üçì Raspberry Pi' : 'üíª ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå'}
              </div>
            </div>
          </Card.Section>
        </Card>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î */}
      {isLoading && (
        <Card shadow="lg" padding="lg" radius="md" withBorder style={{ maxWidth: '400px', margin: '0 auto' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '48px', marginBottom: '1rem' }}>üìπ</div>
            <Text size="lg" fw={500} mb="sm">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...</Text>
            <Text size="sm" c="dimmed">
              {useRaspberryPi 
                ? `‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å ${raspberryPiIP}:${raspberryPiPort}`
                : '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà'
              }
            </Text>
          </div>
        </Card>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ stream */}
      {!isLoading && !isStreaming && (
        <Card shadow="lg" padding="lg" radius="md" withBorder style={{ maxWidth: '400px', margin: '0 auto' }}>
          <div style={{ textAlign: 'center' }}>
            <div style={{ fontSize: '48px', marginBottom: '1rem' }}>üîÑ</div>
            <Text size="lg" fw={500} mb="sm">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á...</Text>
            <Text size="sm" c="dimmed">‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏≠‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</Text>
            {useRaspberryPi && (
              <Text size="xs" c="blue" mt="xs">
                üçì ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å Raspberry Pi: {raspberryPiIP}:{raspberryPiPort}
              </Text>
            )}
          </div>
        </Card>
      )}
    </Container>
  );
};

export default Camera;